<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/algorithms/InsertionSort.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/algorithms/InsertionSort.java" />
              <option name="updatedContent" value="package algorithms;&#10;&#10;import visualizer.SortingPanel;&#10;&#10;public class InsertionSort implements SortAlgorithm {&#10;    @Override&#10;    public void sort(int[] array, SortingPanel panel, int delay) throws InterruptedException {&#10;        int n = array.length;&#10;        for (int i = 1; i &lt; n; i++) {&#10;            int key = array[i];&#10;            int j = i - 1;&#10;            while (j &gt;= 0 &amp;&amp; array[j] &gt; key) {&#10;                panel.highlightCompare(j, j + 1);&#10;                panel.setExplanation(&quot;Comparing &quot; + array[j] + &quot; and &quot; + key);&#10;                Thread.sleep(panel.getDelay());&#10;                panel.waitForNextStep();&#10;                array[j + 1] = array[j];&#10;                panel.highlightSwap(j, j + 1);&#10;                Thread.sleep(panel.getDelay());&#10;                panel.waitForNextStep();&#10;                panel.clearHighlights();&#10;                j--;&#10;            }&#10;            array[j + 1] = key;&#10;            panel.clearHighlights();&#10;        }&#10;        panel.setSorted(true);&#10;        panel.setExplanation(&quot;Sorting complete! Array is now sorted.&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/algorithms/MergeSort.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/algorithms/MergeSort.java" />
              <option name="updatedContent" value="package algorithms;&#10;&#10;import visualizer.SortingPanel;&#10;&#10;public class MergeSort implements SortAlgorithm {&#10;    @Override&#10;    public void sort(int[] array, SortingPanel panel, int delay) throws InterruptedException {&#10;        mergeSort(array, 0, array.length - 1, panel);&#10;        panel.setSorted(true);&#10;        panel.setExplanation(&quot;Sorting complete! Array is now sorted.&quot;);&#10;    }&#10;&#10;    private void mergeSort(int[] array, int left, int right, SortingPanel panel) throws InterruptedException {&#10;        if (left &lt; right) {&#10;            int mid = left + (right - left) / 2;&#10;            mergeSort(array, left, mid, panel);&#10;            mergeSort(array, mid + 1, right, panel);&#10;            merge(array, left, mid, right, panel);&#10;        }&#10;    }&#10;&#10;    private void merge(int[] array, int left, int mid, int right, SortingPanel panel) throws InterruptedException {&#10;        int n1 = mid - left + 1;&#10;        int n2 = right - mid;&#10;        int[] L = new int[n1];&#10;        int[] R = new int[n2];&#10;        for (int i = 0; i &lt; n1; ++i)&#10;            L[i] = array[left + i];&#10;        for (int j = 0; j &lt; n2; ++j)&#10;            R[j] = array[mid + 1 + j];&#10;        int i = 0, j = 0, k = left;&#10;        while (i &lt; n1 &amp;&amp; j &lt; n2) {&#10;            panel.highlightCompare(left + i, mid + 1 + j);&#10;            panel.setExplanation(&quot;Comparing &quot; + L[i] + &quot; and &quot; + R[j]);&#10;            Thread.sleep(panel.getDelay());&#10;            panel.waitForNextStep();&#10;            if (L[i] &lt;= R[j]) {&#10;                array[k] = L[i];&#10;                i++;&#10;            } else {&#10;                array[k] = R[j];&#10;                j++;&#10;            }&#10;            panel.clearHighlights();&#10;            k++;&#10;        }&#10;        while (i &lt; n1) {&#10;            array[k++] = L[i++];&#10;        }&#10;        while (j &lt; n2) {&#10;            array[k++] = R[j++];&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/algorithms/QuickSort.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/algorithms/QuickSort.java" />
              <option name="updatedContent" value="package algorithms;&#10;&#10;import visualizer.SortingPanel;&#10;&#10;public class QuickSort implements SortAlgorithm {&#10;    @Override&#10;    public void sort(int[] array, SortingPanel panel, int delay) throws InterruptedException {&#10;        quickSort(array, 0, array.length - 1, panel);&#10;        panel.setSorted(true);&#10;        panel.setExplanation(&quot;Sorting complete! Array is now sorted.&quot;);&#10;    }&#10;&#10;    private void quickSort(int[] array, int low, int high, SortingPanel panel) throws InterruptedException {&#10;        if (low &lt; high) {&#10;            int pi = partition(array, low, high, panel);&#10;            quickSort(array, low, pi - 1, panel);&#10;            quickSort(array, pi + 1, high, panel);&#10;        }&#10;    }&#10;&#10;    private int partition(int[] array, int low, int high, SortingPanel panel) throws InterruptedException {&#10;        int pivot = array[high];&#10;        int i = (low - 1);&#10;        for (int j = low; j &lt; high; j++) {&#10;            panel.highlightCompare(j, high);&#10;            panel.setExplanation(&quot;Comparing &quot; + array[j] + &quot; and pivot &quot; + pivot);&#10;            Thread.sleep(panel.getDelay());&#10;            panel.waitForNextStep();&#10;            if (array[j] &lt; pivot) {&#10;                i++;&#10;                int temp = array[i];&#10;                array[i] = array[j];&#10;                array[j] = temp;&#10;                panel.highlightSwap(i, j);&#10;                Thread.sleep(panel.getDelay());&#10;                panel.waitForNextStep();&#10;            }&#10;            panel.clearHighlights();&#10;        }&#10;        int temp = array[i + 1];&#10;        array[i + 1] = array[high];&#10;        array[high] = temp;&#10;        panel.highlightSwap(i + 1, high);&#10;        Thread.sleep(panel.getDelay());&#10;        panel.waitForNextStep();&#10;        panel.clearHighlights();&#10;        return i + 1;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/algorithms/SelectionSort.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/algorithms/SelectionSort.java" />
              <option name="updatedContent" value="package algorithms;&#10;&#10;import visualizer.SortingPanel;&#10;&#10;public class SelectionSort implements SortAlgorithm {&#10;    @Override&#10;    public void sort(int[] array, SortingPanel panel, int delay) throws InterruptedException {&#10;        int n = array.length;&#10;        for (int i = 0; i &lt; n - 1; i++) {&#10;            int minIdx = i;&#10;            for (int j = i + 1; j &lt; n; j++) {&#10;                panel.highlightCompare(minIdx, j);&#10;                panel.setExplanation(&quot;Comparing &quot; + array[minIdx] + &quot; and &quot; + array[j]);&#10;                Thread.sleep(panel.getDelay());&#10;                panel.waitForNextStep();&#10;                if (array[j] &lt; array[minIdx]) {&#10;                    minIdx = j;&#10;                }&#10;                panel.clearHighlights();&#10;            }&#10;            if (minIdx != i) {&#10;                panel.setExplanation(&quot;Swapping &quot; + array[i] + &quot; and &quot; + array[minIdx]);&#10;                int temp = array[minIdx];&#10;                array[minIdx] = array[i];&#10;                array[i] = temp;&#10;                panel.highlightSwap(i, minIdx);&#10;                Thread.sleep(panel.getDelay());&#10;                panel.waitForNextStep();&#10;                panel.clearHighlights();&#10;            }&#10;        }&#10;        panel.setSorted(true);&#10;        panel.setExplanation(&quot;Sorting complete! Array is now sorted.&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/visualizer/SortingPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/visualizer/SortingPanel.java" />
              <option name="originalContent" value="package visualizer;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.*;&#10;import java.util.Random;&#10;import algorithms.BubbleSort;&#10;import algorithms.SelectionSort;&#10;import algorithms.SortAlgorithm;&#10;&#10;public class SortingPanel extends JPanel {&#10;&#10;    private int[] array;&#10;    private int compareIndex1 = -1;&#10;    private int compareIndex2 = -1;&#10;    private int swapIndex1 = -1;&#10;    private int swapIndex2 = -1;&#10;    private boolean isSorted = false;&#10;    private JSlider speedSlider;&#10;    private boolean stepMode = false;&#10;    private boolean waitForStep = false;&#10;    private JLabel explanationLabel;&#10;    private JComboBox&lt;String&gt; algorithmDropdown;&#10;    private String[] algorithms = {&quot;Bubble Sort&quot;, &quot;Selection Sort&quot;};&#10;&#10;&#10;    private final Object stepLock = new Object();&#10;&#10;&#10;    public SortingPanel() {&#10;        setBackground(new Color(30, 30, 30));&#10;        setLayout(new BorderLayout());&#10;&#10;        generateArray();&#10;&#10;        // --- Top Panel: User Controls ---&#10;        JPanel controlPanel = new JPanel();&#10;        controlPanel.setBackground(new Color(30, 30, 30));&#10;        controlPanel.setLayout(new GridBagLayout());&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(8, 8, 8, 8); // padding&#10;&#10;        JTextField inputField = new JTextField(25);&#10;        JButton useInputButton = styledButton(&quot;Use My Input&quot;);&#10;        JButton generateButton = styledButton(&quot;Generate Random&quot;);&#10;        JButton sortButton = styledButton(&quot;Sort&quot;);&#10;        JButton stepModeButton = styledButton(&quot;Step Mode: OFF&quot;);&#10;        JButton stepButton = styledButton(&quot;Step&quot;);&#10;&#10;        speedSlider = new JSlider(1, 100, 50);&#10;        speedSlider.setBackground(new Color(30, 30, 30));&#10;        speedSlider.setForeground(Color.WHITE);&#10;        speedSlider.setMajorTickSpacing(25);&#10;        speedSlider.setMinorTickSpacing(5);&#10;        speedSlider.setPaintTicks(true);&#10;        speedSlider.setPaintLabels(true);&#10;&#10;        explanationLabel = new JLabel(&quot;Welcome to the Bubble Sort Visualizer&quot;);&#10;        explanationLabel.setForeground(Color.WHITE);  // text color&#10;        explanationLabel.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 16));&#10;        add(explanationLabel, BorderLayout.SOUTH); // Put it at the bottom of the panel&#10;&#10;&#10;&#10;        // Add controls row-by-row&#10;        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 1;&#10;        controlPanel.add(new JLabel(styledText(&quot;Enter numbers:&quot;)), gbc);&#10;        gbc.gridx = 1; gbc.gridwidth = 2;&#10;        controlPanel.add(inputField, gbc);&#10;&#10;        gbc.gridx = 3; gbc.gridwidth = 1;&#10;        controlPanel.add(useInputButton, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy++;&#10;        controlPanel.add(generateButton, gbc);&#10;        gbc.gridx = 1;&#10;        controlPanel.add(sortButton, gbc);&#10;        gbc.gridx = 2;&#10;        controlPanel.add(stepModeButton, gbc);&#10;        gbc.gridx = 3;&#10;        controlPanel.add(stepButton, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy++;&#10;        gbc.gridwidth = 4;&#10;        controlPanel.add(new JLabel(styledText(&quot;Speed Control:&quot;)), gbc);&#10;        gbc.gridy++;&#10;        controlPanel.add(speedSlider, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy++;&#10;        gbc.gridwidth = 2;&#10;        controlPanel.add(new JLabel(styledText(&quot;Algorithm:&quot;)), gbc);&#10;        gbc.gridx = 2; gbc.gridwidth = 2;&#10;        algorithmDropdown = new JComboBox&lt;&gt;(algorithms);&#10;        algorithmDropdown.setBackground(new Color(30, 30, 30));&#10;        algorithmDropdown.setForeground(Color.WHITE);&#10;        controlPanel.add(algorithmDropdown, gbc);&#10;&#10;        add(controlPanel, BorderLayout.NORTH);&#10;&#10;        // --- Button Actions ---&#10;        stepModeButton.addActionListener(e -&gt; {&#10;            stepMode = !stepMode;&#10;            stepModeButton.setText(&quot;Step Mode: &quot; + (stepMode ? &quot;ON&quot; : &quot;OFF&quot;));&#10;        });&#10;&#10;        stepButton.addActionListener(e -&gt; {&#10;            synchronized (stepLock) {&#10;                waitForStep = false;&#10;                stepLock.notify();&#10;            }&#10;        });&#10;&#10;        useInputButton.addActionListener(e -&gt; {&#10;            String inputText = inputField.getText();&#10;            String[] parts = inputText.split(&quot;,&quot;);&#10;            int[] customArray = new int[parts.length];&#10;            try {&#10;                for (int i = 0; i &lt; parts.length; i++) {&#10;                    customArray[i] = Integer.parseInt(parts[i].trim());&#10;                }&#10;                array = customArray;&#10;                isSorted = false;&#10;                repaint();&#10;            } catch (NumberFormatException ex) {&#10;                JOptionPane.showMessageDialog(this, &quot;Please enter valid comma-separated numbers.&quot;, &quot;Invalid Input&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        });&#10;&#10;        generateButton.addActionListener(e -&gt; {&#10;            generateArray();&#10;            isSorted = false;&#10;            repaint();&#10;        });&#10;&#10;        sortButton.addActionListener(e -&gt; {&#10;            new Thread(() -&gt; {&#10;                try {&#10;                    String selected = (String) algorithmDropdown.getSelectedItem();&#10;                    SortAlgorithm sorter;&#10;                    if (&quot;Bubble Sort&quot;.equals(selected)) {&#10;                        sorter = (array, panel, delay) -&gt; BubbleSort.sort(array, panel, delay);&#10;                    } else if (&quot;Selection Sort&quot;.equals(selected)) {&#10;                        sorter = new SelectionSort();&#10;                    } else {&#10;                        setExplanation(&quot;Unknown algorithm selected.&quot;);&#10;                        return;&#10;                    }&#10;                    sorter.sort(array, this, getDelay());&#10;                } catch (InterruptedException ex) {&#10;                    ex.printStackTrace();&#10;                }&#10;            }).start();&#10;        });&#10;    }&#10;&#10;    private void generateArray() {&#10;        Random rand = new Random();&#10;        array = new int[80];&#10;        for (int i = 0; i &lt; array.length; i++) {&#10;            array[i] = rand.nextInt(400) + 50;&#10;        }&#10;    }&#10;&#10;    public void paintComponent(Graphics g) {&#10;        super.paintComponent(g);&#10;        setBackground(new Color(30, 30, 30));&#10;&#10;        Graphics2D g2 = (Graphics2D) g;&#10;        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;&#10;        int width = getWidth();&#10;        int height = getHeight();&#10;        int barWidth = width / array.length;&#10;&#10;        for (int i = 0; i &lt; array.length; i++) {&#10;            if (i == compareIndex1 || i == compareIndex2) {&#10;                g2.setColor(Color.YELLOW);&#10;            } else if (i == swapIndex1 || i == swapIndex2) {&#10;                g2.setColor(Color.RED);&#10;            } else if (isSorted) {&#10;                g2.setColor(new Color(144, 238, 144)); // light green&#10;            } else {&#10;                g2.setColor(new Color(0, 255, 255)); // cyan&#10;            }&#10;&#10;            int x = i * barWidth;&#10;            int y = height - array[i];&#10;            g2.fillRoundRect(x, y, barWidth - 2, array[i], 5, 5);&#10;        }&#10;    }&#10;&#10;    public int getDelay() {&#10;        return 101 - speedSlider.getValue();&#10;    }&#10;&#10;    public int[] getArray() {&#10;        return array;&#10;    }&#10;&#10;    public void highlightCompare(int i, int j) {&#10;        compareIndex1 = i;&#10;        compareIndex2 = j;&#10;        swapIndex1 = swapIndex2 = -1;&#10;        repaint();&#10;    }&#10;&#10;    public void highlightSwap(int i, int j) {&#10;        swapIndex1 = i;&#10;        swapIndex2 = j;&#10;        compareIndex1 = compareIndex2 = -1;&#10;        repaint();&#10;    }&#10;&#10;    public void clearHighlights() {&#10;        compareIndex1 = compareIndex2 = swapIndex1 = swapIndex2 = -1;&#10;        repaint();&#10;    }&#10;&#10;    public void setSorted(boolean sorted) {&#10;        isSorted = sorted;&#10;        repaint();&#10;    }&#10;&#10;    public void waitForNextStep() {&#10;        if (stepMode) {&#10;            waitForStep = true;&#10;            synchronized (stepLock) {&#10;                while (waitForStep) {&#10;                    try {&#10;                        stepLock.wait();&#10;                    } catch (InterruptedException e) {&#10;                        e.printStackTrace();&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;    public void setExplanation(String explanation) {&#10;        explanationLabel.setText(explanation);&#10;    }&#10;&#10;&#10;    private JButton styledButton(String text) {&#10;        JButton button = new JButton(text);&#10;        button.setFocusPainted(false);&#10;        button.setBackground(new Color(50, 50, 50));&#10;        button.setForeground(Color.WHITE);&#10;        button.setFont(new Font(&quot;SansSerif&quot;, Font.BOLD, 12));&#10;        return button;&#10;    }&#10;&#10;    private String styledText(String label) {&#10;        return &quot;&lt;html&gt;&lt;font color='white' face='SansSerif'&gt;&quot; + label + &quot;&lt;/font&gt;&lt;/html&gt;&quot;;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package visualizer;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.*;&#10;import java.util.Random;&#10;import algorithms.BubbleSort;&#10;import algorithms.SelectionSort;&#10;import algorithms.SortAlgorithm;&#10;import algorithms.InsertionSort;&#10;import algorithms.MergeSort;&#10;import algorithms.QuickSort;&#10;&#10;public class SortingPanel extends JPanel {&#10;&#10;    private int[] array;&#10;    private int compareIndex1 = -1;&#10;    private int compareIndex2 = -1;&#10;    private int swapIndex1 = -1;&#10;    private int swapIndex2 = -1;&#10;    private boolean isSorted = false;&#10;    private JSlider speedSlider;&#10;    private boolean stepMode = false;&#10;    private boolean waitForStep = false;&#10;    private JLabel explanationLabel;&#10;    private JComboBox&lt;String&gt; algorithmDropdown;&#10;    private String[] algorithms = {&quot;Bubble Sort&quot;, &quot;Selection Sort&quot;, &quot;Insertion Sort&quot;, &quot;Merge Sort&quot;, &quot;Quick Sort&quot;};&#10;&#10;&#10;    private final Object stepLock = new Object();&#10;&#10;&#10;    public SortingPanel() {&#10;        setBackground(new Color(30, 30, 30));&#10;        setLayout(new BorderLayout());&#10;&#10;        generateArray();&#10;&#10;        // --- Top Panel: User Controls ---&#10;        JPanel controlPanel = new JPanel();&#10;        controlPanel.setBackground(new Color(30, 30, 30));&#10;        controlPanel.setLayout(new GridBagLayout());&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(8, 8, 8, 8); // padding&#10;&#10;        JTextField inputField = new JTextField(25);&#10;        JButton useInputButton = styledButton(&quot;Use My Input&quot;);&#10;        JButton generateButton = styledButton(&quot;Generate Random&quot;);&#10;        JButton sortButton = styledButton(&quot;Sort&quot;);&#10;        JButton stepModeButton = styledButton(&quot;Step Mode: OFF&quot;);&#10;        JButton stepButton = styledButton(&quot;Step&quot;);&#10;&#10;        speedSlider = new JSlider(1, 100, 50);&#10;        speedSlider.setBackground(new Color(30, 30, 30));&#10;        speedSlider.setForeground(Color.WHITE);&#10;        speedSlider.setMajorTickSpacing(25);&#10;        speedSlider.setMinorTickSpacing(5);&#10;        speedSlider.setPaintTicks(true);&#10;        speedSlider.setPaintLabels(true);&#10;&#10;        explanationLabel = new JLabel(&quot;Welcome to the Bubble Sort Visualizer&quot;);&#10;        explanationLabel.setForeground(Color.WHITE);  // text color&#10;        explanationLabel.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 16));&#10;        add(explanationLabel, BorderLayout.SOUTH); // Put it at the bottom of the panel&#10;&#10;&#10;&#10;        // Add controls row-by-row&#10;        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 1;&#10;        controlPanel.add(new JLabel(styledText(&quot;Enter numbers:&quot;)), gbc);&#10;        gbc.gridx = 1; gbc.gridwidth = 2;&#10;        controlPanel.add(inputField, gbc);&#10;&#10;        gbc.gridx = 3; gbc.gridwidth = 1;&#10;        controlPanel.add(useInputButton, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy++;&#10;        controlPanel.add(generateButton, gbc);&#10;        gbc.gridx = 1;&#10;        controlPanel.add(sortButton, gbc);&#10;        gbc.gridx = 2;&#10;        controlPanel.add(stepModeButton, gbc);&#10;        gbc.gridx = 3;&#10;        controlPanel.add(stepButton, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy++;&#10;        gbc.gridwidth = 4;&#10;        controlPanel.add(new JLabel(styledText(&quot;Speed Control:&quot;)), gbc);&#10;        gbc.gridy++;&#10;        controlPanel.add(speedSlider, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy++;&#10;        gbc.gridwidth = 2;&#10;        controlPanel.add(new JLabel(styledText(&quot;Algorithm:&quot;)), gbc);&#10;        gbc.gridx = 2; gbc.gridwidth = 2;&#10;        algorithmDropdown = new JComboBox&lt;&gt;(algorithms);&#10;        algorithmDropdown.setBackground(new Color(30, 30, 30));&#10;        algorithmDropdown.setForeground(Color.WHITE);&#10;        controlPanel.add(algorithmDropdown, gbc);&#10;&#10;        add(controlPanel, BorderLayout.NORTH);&#10;&#10;        // --- Button Actions ---&#10;        stepModeButton.addActionListener(e -&gt; {&#10;            stepMode = !stepMode;&#10;            stepModeButton.setText(&quot;Step Mode: &quot; + (stepMode ? &quot;ON&quot; : &quot;OFF&quot;));&#10;        });&#10;&#10;        stepButton.addActionListener(e -&gt; {&#10;            synchronized (stepLock) {&#10;                waitForStep = false;&#10;                stepLock.notify();&#10;            }&#10;        });&#10;&#10;        useInputButton.addActionListener(e -&gt; {&#10;            String inputText = inputField.getText();&#10;            String[] parts = inputText.split(&quot;,&quot;);&#10;            int[] customArray = new int[parts.length];&#10;            try {&#10;                for (int i = 0; i &lt; parts.length; i++) {&#10;                    customArray[i] = Integer.parseInt(parts[i].trim());&#10;                }&#10;                array = customArray;&#10;                isSorted = false;&#10;                repaint();&#10;            } catch (NumberFormatException ex) {&#10;                JOptionPane.showMessageDialog(this, &quot;Please enter valid comma-separated numbers.&quot;, &quot;Invalid Input&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        });&#10;&#10;        generateButton.addActionListener(e -&gt; {&#10;            generateArray();&#10;            isSorted = false;&#10;            repaint();&#10;        });&#10;&#10;        sortButton.addActionListener(e -&gt; {&#10;            new Thread(() -&gt; {&#10;                try {&#10;                    String selected = (String) algorithmDropdown.getSelectedItem();&#10;                    SortAlgorithm sorter;&#10;                    if (&quot;Bubble Sort&quot;.equals(selected)) {&#10;                        sorter = (array, panel, delay) -&gt; BubbleSort.sort(array, panel, delay);&#10;                    } else if (&quot;Selection Sort&quot;.equals(selected)) {&#10;                        sorter = new SelectionSort();&#10;                    } else if (&quot;Insertion Sort&quot;.equals(selected)) {&#10;                        sorter = new InsertionSort();&#10;                    } else if (&quot;Merge Sort&quot;.equals(selected)) {&#10;                        sorter = new MergeSort();&#10;                    } else if (&quot;Quick Sort&quot;.equals(selected)) {&#10;                        sorter = new QuickSort();&#10;                    } else {&#10;                        setExplanation(&quot;Unknown algorithm selected.&quot;);&#10;                        return;&#10;                    }&#10;                    sorter.sort(array, this, getDelay());&#10;                } catch (InterruptedException ex) {&#10;                    ex.printStackTrace();&#10;                }&#10;            }).start();&#10;        });&#10;    }&#10;&#10;    private void generateArray() {&#10;        Random rand = new Random();&#10;        array = new int[80];&#10;        for (int i = 0; i &lt; array.length; i++) {&#10;            array[i] = rand.nextInt(400) + 50;&#10;        }&#10;    }&#10;&#10;    public void paintComponent(Graphics g) {&#10;        super.paintComponent(g);&#10;        setBackground(new Color(30, 30, 30));&#10;&#10;        Graphics2D g2 = (Graphics2D) g;&#10;        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;&#10;        int width = getWidth();&#10;        int height = getHeight();&#10;        int barWidth = width / array.length;&#10;&#10;        for (int i = 0; i &lt; array.length; i++) {&#10;            if (i == compareIndex1 || i == compareIndex2) {&#10;                g2.setColor(Color.YELLOW);&#10;            } else if (i == swapIndex1 || i == swapIndex2) {&#10;                g2.setColor(Color.RED);&#10;            } else if (isSorted) {&#10;                g2.setColor(new Color(144, 238, 144)); // light green&#10;            } else {&#10;                g2.setColor(new Color(0, 255, 255)); // cyan&#10;            }&#10;&#10;            int x = i * barWidth;&#10;            int y = height - array[i];&#10;            g2.fillRoundRect(x, y, barWidth - 2, array[i], 5, 5);&#10;        }&#10;    }&#10;&#10;    public int getDelay() {&#10;        return 101 - speedSlider.getValue();&#10;    }&#10;&#10;    public int[] getArray() {&#10;        return array;&#10;    }&#10;&#10;    public void highlightCompare(int i, int j) {&#10;        compareIndex1 = i;&#10;        compareIndex2 = j;&#10;        swapIndex1 = swapIndex2 = -1;&#10;        repaint();&#10;    }&#10;&#10;    public void highlightSwap(int i, int j) {&#10;        swapIndex1 = i;&#10;        swapIndex2 = j;&#10;        compareIndex1 = compareIndex2 = -1;&#10;        repaint();&#10;    }&#10;&#10;    public void clearHighlights() {&#10;        compareIndex1 = compareIndex2 = swapIndex1 = swapIndex2 = -1;&#10;        repaint();&#10;    }&#10;&#10;    public void setSorted(boolean sorted) {&#10;        isSorted = sorted;&#10;        repaint();&#10;    }&#10;&#10;    public void waitForNextStep() {&#10;        if (stepMode) {&#10;            waitForStep = true;&#10;            synchronized (stepLock) {&#10;                while (waitForStep) {&#10;                    try {&#10;                        stepLock.wait();&#10;                    } catch (InterruptedException e) {&#10;                        e.printStackTrace();&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;    public void setExplanation(String explanation) {&#10;        explanationLabel.setText(explanation);&#10;    }&#10;&#10;&#10;    private JButton styledButton(String text) {&#10;        JButton button = new JButton(text);&#10;        button.setFocusPainted(false);&#10;        button.setBackground(new Color(50, 50, 50));&#10;        button.setForeground(Color.WHITE);&#10;        button.setFont(new Font(&quot;SansSerif&quot;, Font.BOLD, 12));&#10;        return button;&#10;    }&#10;&#10;    private String styledText(String label) {&#10;        return &quot;&lt;html&gt;&lt;font color='white' face='SansSerif'&gt;&quot; + label + &quot;&lt;/font&gt;&lt;/html&gt;&quot;;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>